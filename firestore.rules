rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAnyAuthenticated() {
      return request.auth != null;
    }
    
    function isUserAuthenticated(userId) {
      return isAnyAuthenticated() && userId == request.auth.uid;
    }

    function documentPath(paths) { // paths must be array of string
      return path([['databases', database, 'documents'].join('/'), paths.join('/')].join('/'));
    }

    function getUser(userId) {
      return get(documentPath(['users', userId]));
    }

    function isApprover() {
      return get(getUser(request.auth.uid).data.roleRef).id == '2'
    }

    function hasAssistToApproverId(userId, assistToApproverId) {
      return get(documentPath(['users', userId, 'assistToApprovers', assistToApproverId])).data.assistToApproverId == request.auth.uid
    }
    
    match /roles/{roleId} {
      allow read: if isAnyAuthenticated()
    }

    match /status/{stateId} {
      allow read: if isAnyAuthenticated()
    }
    
    match /users/{userId} {
      allow get: if isUserAuthenticated(userId)
       || hasAssistToApproverId(userId, request.auth.uid) && isApprover();
      allow write: if isUserAuthenticated(userId);
      
      match /assistantUserIds/{assistantUserId}/{document=**} {
        allow read: if isUserAuthenticated(userId) && isApprover()
        allow write: if isUserAuthenticated(userId) && isApprover()
      }
      
      match /assistToApprovers/{assistToApproverId}/{document=**} {
        allow read: if request.auth.uid == assistToApproverId || isUserAuthenticated(userId);
        allow write: if request.auth.uid == assistToApproverId || isUserAuthenticated(userId); 
      }      
    }
  }
}
